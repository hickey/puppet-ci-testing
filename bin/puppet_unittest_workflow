#!/usr/bin/env  ruby

require 'optparse'
require 'ostruct'
require 'yaml'

require 'rake'
require 'rspec/core/rake_task'
require 'puppetlabs_spec_helper/rake_tasks'
require 'puppet-lint/tasks/puppet-lint'
require 'metadata-json-lint/rake_task'

require 'puppet-lint'
require 'metadata_json_lint'

require 'check_file_syntax'


PUPPET_DIRS = ['files', 'lib', 'manifest', 'spec', 'templates', 'tests',
               '.git_hooks']

# .fixtures.yml file is how the RSpec testing pulls in dependent
# puppet modules. We are able to generate it from the dependency
# information specified in the metadata.json file.
def create_fixtures_yml
  metadata = JSON.parse(File.read('metadata.json'))
  File.open('.fixtures.yml', 'w') do |fix|
    fix.puts "fixtures:"
    fix.puts "  symlinks:"
    fix.puts "    #{(metadata['name'].split(/[\/\-]/))[-1]}: \"\#{source_dir}\""
    if metadata.key? 'dependencies'
      fix.puts "  forge_modules:"
      metadata['dependencies'].each do |dep|
        if dep.key? 'version_requirement'
          fix.puts "    #{(dep['name'].split(/[\/\-]/))[-1]}:"
          fix.puts "      repo: \"#{dep['name']}\""
          fix.puts "      ref: \"#{dep['version_requirement'].gsub(/[=\<\>~\s]+([\d\.]+).*$/, '\1')}\""
        else
          fix.puts "    #{(dep['name'].split(/\/\-/))[-1]}: \"#{dep['name']}\""
        end
      end
    end
  end
end


def process_syntax_checks(opts)
  # collect all the current directories
  dirs = Dir.entries('.').select {|item| File.directory? item and item !~ /^\.{1,2}$/}

  # calculate what will be excluded and what will be checked
  exclude_dirs = opts.syntax_exclude_dirs || dirs - (dirs - PUPPET_DIRS)
  checked_dirs = (dirs - PUPPET_DIRS) - exclude_dirs

  puts <<-EOM
========================================================================
========================================================================

  Performing syntax checks

    File types:  #{opts.syntax_checks.map {|i| i.to_s}.join(', ')}
    Directories: #{checked_dirs.join(', ')}

************************************************************************

EOM

  num = CheckFileSyntax.search_all_files_for_errors('.', excludes=exclude_dirs,
                                          checks=opts.syntax_checks)

  if num > 0
    puts <<-EOM

************************************************************************

  Failed syntax checks: #{num}

            THESE CHECKS MUST PASS TO COMPLETE BUILD.

************************************************************************

EOM
    return false
  end
  return true
end


def process_puppet_lint_parsing(opts)

  all_checks = PuppetLint.configuration.checks.map {|chk| chk.to_s}
  enables = opts.puppet_lint_enable.empty? ? all_checks : opts.puppet_lint_enable
  disables = all_checks - enables

  puts <<-EOM

========================================================================
========================================================================

  Performing puppet manifest lint parsing

    Enabled lint options:
          #{enables.join("\n          ")}

************************************************************************

EOM

  # configure the rake task to disable specific checks
  if not disables.empty?
    Rake::Task['lint'].clear
    PuppetLint::RakeTask.new :lint do |config|
      config.ignore_paths = ['spec/**/*.pp', 'vendor/**/*.pp']
      config.log_format = '%{path}:%{line}:%{check}:%{KIND}:%{message}'
      config.fail_on_warnings = false
      config.disable_checks = disables
    end
  end

  begin
    # TODO: gather lint output and generate JUnit reports
    Rake.application['lint'].invoke
  rescue SystemExit => e
    puts <<-EOM

************************************************************************

                            BUILD HAS FAILED

             Correct the above Puppet LINT errors to correct

************************************************************************

EOM
    return false
  end
  return true
end


def process_metadata_lint_parsing(opts)

  all_checks = MetadataJsonLint.options.members.select {|check| check.to_s if check != :format }
  enables = opts.metadata_lint_enable.empty? ? all_checks : opts.metadata_lint_enable
  disables = all_checks - enables

  puts <<-EOM

========================================================================
========================================================================

  Performing metadata.json lint parsing

    Enabled lint options:
          #{enables.join("\n          ")}

************************************************************************

EOM

  # configure the rake task to disable specific checks
  enables.each {|check| MetadataJsonLint.options[check] = true }
  disables.each {|check| MetadataJsonLint.options[check] = false}

  begin
    # TODO: gather lint output and generate JUnit reports
    Rake.application['metadata_lint'].invoke
  rescue SystemExit => e
    puts <<-EOM

************************************************************************

                            BUILD HAS FAILED

             Correct the above metadata.json LINT errors to correct

************************************************************************

EOM
    return false
  end
  return true
end


def process_rspec_tests(opts)

  puts <<-EOM

========================================================================
========================================================================

  Performaning RSpec unit testing

************************************************************************

EOM

  if opts.rspec_clean_sources
    # execute rake spec_clean
    puts "***"
    puts "***   Cleaning spec fixtures"
    puts "***"
    Rake.application['spec_clean'].invoke
  end

  # Add a spec job to generate JUnit reports
  RSpec::Core::RakeTask.new(:spec) do |task|
    task.rspec_opts = %w[--format RspecJunitFormatter --out test-reports/rspec.xml]
    task.pattern = 'spec/{classes,defines,unit,functions,hosts,integration}/**/*_spec.rb'
  end

  # we need a .fixtures.yml file to pull in dependent modules
  create_fixtures_yml
  Rake.application['spec'].invoke
end


if ENV['PUPPET_CI_CONF']
  CONF_FILE = ENV['PUPPET_CI_CONF']
else
  CONF_FILE = File.expand_path('../../etc/puppet_unittest_workflow.yaml', $0)
end

# Set script defaults
options = OpenStruct.new
options.syntax_run = true
options.syntax_checks = CheckFileSyntax::ALL_CHECKS
options.syntax_exclude_dirs = []
options.puppet_lint_run = true
options.puppet_lint_enable = []
options.metadata_lint_run = true
options.metadata_lint_enable = []
options.rspec_run = true
options.rspec_clean_sources = false


# read in config file and set options
defaults = YAML.load_file(CONF_FILE)
defaults.keys.each do |test_type|
  opts = defaults[test_type]

  if test_type == 'syntax'
    options.syntax_run = opts['run'] if opts.has_key? 'run'
    options.syntax_checks = opts['checks'] if opts.has_key? 'checks'
    options.syntax_exclude_dirs = opts['exclude_dirs'] if opts.has_key? 'exclude_dirs'
  end

  if test_type == 'puppet_lint'
    options.puppet_lint_run = opts['run'] if opts.has_key? 'run'
    options.puppet_lint_enable = opts['enable'] if opts.has_key? 'enable'
  end

  if test_type == 'metadata_lint'
    options.metadata_lint_run = opts['run'] if opts.has_key? 'run'
    options.metadata_lint_enable = opts['enable'] if opts.has_key? 'enable'
  end

  if test_type == 'rspec'
    options.rspec_run = opts['run'] if opts.has_key? 'run'
    options.rspec_clean_sources = opts['clean_sources'] if opts.has_key? 'clean_sources'
  end

end


# process the command line options and override prev set settings
OptionParser.new do |opts|
  opts.on('--[no-]lint', "Enable/disable lint parsing (Default: #{options[:puppet_lint_run]})") do |val|
    options.puppet_lint_run = val
    options.metadata_lint_run = val
  end

  opts.on('--disable-syntax-check [TYPE]', 'Disable syntax check for TYPE') do |val|
    if val.nil? or val =~ /all/i
      options.syntax_run = false
    else
      options.syntax_checks.select! {|type| type != val.to_sym}
    end
  end

  opts.on('--enable-syntax-check [TYPE]', 'Enable syntax checks for TYPE') do |val|
    if val.nil?
      options.syntax_checks = CheckFileSyntax::ALL_CHECKS
    else
      if not options.syntax_checks.include? val.to_sym
        options.syntax_checks << val.to_sym
      end
    end
  end

  opts.on('--clean-sources', 'Clean out dependent sources and start from scratch') do
    options.rspec_clean_sources = true
  end


  opts.on('--disable-rspec', 'Disable rspec unittests') do
    options.rspec_run = false
  end


  opts.separator <<-EOH

Config file: #{CONF_FILE}
Config file location can be specified by setting $PUPPET_CI_CONF

Default syntax checks: #{options.syntax_checks.map {|i| i.to_s}.join ', '}

Using the keyword 'all' will allow all syntax checks to be enabled or
disabled. Order of enable/disable switches are important. Using a
disable switch at the end of options will turn off all syntax checks
even if there are enable syntax check switches on the command line.
EOH

end.parse!


if options.syntax_run
  unless process_syntax_checks(options)
    exit(1)
  end
end


if options.puppet_lint_run
  unless process_puppet_lint_parsing(options)
    exit(2)
  end
end

if options.metadata_lint_run
  unless process_metadata_lint_parsing(options)
    exit(2)
  end
end

if options.rspec_run
  process_rspec_tests(options)
end

